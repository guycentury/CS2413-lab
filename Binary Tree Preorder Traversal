#include <stdio.h>
#include <stdlib.h>

// define tree node
struct TreeNode 
{
    int val;
    struct TreeNode *lft;
    struct TreeNode *rgt;
};

// custom stack
typedef struct 
{
    struct TreeNode **arr;
    int top;
    int cap;
} Stk;

// new stack
Stk* newS(int cap) 
{
    Stk *s = (Stk*)malloc(sizeof(Stk));
    s->arr = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * cap);
    s->top = -1;
    s->cap = cap;
    return s;
}

// Push
void pushS(Stk *s, struct TreeNode *nd) 
{
    if (s->top < s->cap - 1) 
    {
        s->arr[++(s->top)] = nd;
    }
}

// Pop 
struct TreeNode* popS(Stk *s) 
{
    if (s->top >= 0) 
    {
        return s->arr[(s->top)--];
    }
    return NULL;
}

// is stack empty checker
int isEm(Stk *s) 
{
    return s->top == -1;
}

// Preorder traversal
int* preOrd(struct TreeNode* rt, int* retSz) 
{
    int *res = (int*)malloc(100 * sizeof(int));
    int idx = 0;
    if (rt == NULL) 
    {
        *retSz = 0;
        return res;
    }

    Stk *stk = newS(100);
    pushS(stk, rt);

    while (!isEm(stk)) 
    {
        struct TreeNode *cur = popS(stk);
        res[idx++] = cur->val;

        if (cur->rgt != NULL) pushS(stk, cur->rgt);
        if (cur->lft != NULL) pushS(stk, cur->lft);
    }

    *retSz = idx;
    free(stk->arr);
    free(stk);
    return res;
}

// Helper 
struct TreeNode* newNd(int val) 
{
    struct TreeNode *nd = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    nd->val = val;
    nd->lft = NULL;
    nd->rgt = NULL;
    return nd;
}

// Main
int main() 
{
    struct TreeNode *rt = newNd(1);
    rt->rgt = newNd(2);
    rt->rgt->lft = newNd(3);

    int sz;
    int *res = preOrd(rt, &sz);

    printf("Preorder: ");
    for (int i = 0; i < sz; i++)
    {
        printf("%d ", res[i]);
    }
    printf("\n");

    free(res);
    return 0;
}

